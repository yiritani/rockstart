// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/instrument.proto

package proto_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "rockstart/src/_generated/proto/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InstrumentServiceName is the fully-qualified name of the InstrumentService service.
	InstrumentServiceName = "proto.v1.instrument.InstrumentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InstrumentServiceGetInstrumentsProcedure is the fully-qualified name of the InstrumentService's
	// GetInstruments RPC.
	InstrumentServiceGetInstrumentsProcedure = "/proto.v1.instrument.InstrumentService/GetInstruments"
)

// InstrumentServiceClient is a client for the proto.v1.instrument.InstrumentService service.
type InstrumentServiceClient interface {
	GetInstruments(context.Context, *connect.Request[v1.GetInstrumentsRequest]) (*connect.Response[v1.GetInstrumentsResponse], error)
}

// NewInstrumentServiceClient constructs a client for the proto.v1.instrument.InstrumentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInstrumentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InstrumentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	instrumentServiceMethods := v1.File_proto_v1_instrument_proto.Services().ByName("InstrumentService").Methods()
	return &instrumentServiceClient{
		getInstruments: connect.NewClient[v1.GetInstrumentsRequest, v1.GetInstrumentsResponse](
			httpClient,
			baseURL+InstrumentServiceGetInstrumentsProcedure,
			connect.WithSchema(instrumentServiceMethods.ByName("GetInstruments")),
			connect.WithClientOptions(opts...),
		),
	}
}

// instrumentServiceClient implements InstrumentServiceClient.
type instrumentServiceClient struct {
	getInstruments *connect.Client[v1.GetInstrumentsRequest, v1.GetInstrumentsResponse]
}

// GetInstruments calls proto.v1.instrument.InstrumentService.GetInstruments.
func (c *instrumentServiceClient) GetInstruments(ctx context.Context, req *connect.Request[v1.GetInstrumentsRequest]) (*connect.Response[v1.GetInstrumentsResponse], error) {
	return c.getInstruments.CallUnary(ctx, req)
}

// InstrumentServiceHandler is an implementation of the proto.v1.instrument.InstrumentService
// service.
type InstrumentServiceHandler interface {
	GetInstruments(context.Context, *connect.Request[v1.GetInstrumentsRequest]) (*connect.Response[v1.GetInstrumentsResponse], error)
}

// NewInstrumentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInstrumentServiceHandler(svc InstrumentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	instrumentServiceMethods := v1.File_proto_v1_instrument_proto.Services().ByName("InstrumentService").Methods()
	instrumentServiceGetInstrumentsHandler := connect.NewUnaryHandler(
		InstrumentServiceGetInstrumentsProcedure,
		svc.GetInstruments,
		connect.WithSchema(instrumentServiceMethods.ByName("GetInstruments")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.instrument.InstrumentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InstrumentServiceGetInstrumentsProcedure:
			instrumentServiceGetInstrumentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInstrumentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInstrumentServiceHandler struct{}

func (UnimplementedInstrumentServiceHandler) GetInstruments(context.Context, *connect.Request[v1.GetInstrumentsRequest]) (*connect.Response[v1.GetInstrumentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.instrument.InstrumentService.GetInstruments is not implemented"))
}
