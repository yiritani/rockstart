// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: select_instrument.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getInstrument = `-- name: GetInstrument :many
SELECT id, name, type, artist_id, description, tags
FROM instrument
WHERE type = ?
ORDER BY id ASC
`

type GetInstrumentRow struct {
	ID          string
	Name        string
	Type        sql.NullString
	ArtistID    sql.NullString
	Description sql.NullString
	Tags        sql.NullString
}

func (q *Queries) GetInstrument(ctx context.Context, type_ sql.NullString) ([]GetInstrumentRow, error) {
	rows, err := q.db.QueryContext(ctx, getInstrument, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetInstrumentRow{}
	for rows.Next() {
		var i GetInstrumentRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.ArtistID,
			&i.Description,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
